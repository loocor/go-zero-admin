// Code generated by goctl. DO NOT EDIT.
package handler

import (
	"net/http"

	memberaddress "zdmin/api/internal/handler/member/address"
	membergrowthchangehistory "zdmin/api/internal/handler/member/growthchangehistory"
	memberintegrationchangehistory "zdmin/api/internal/handler/member/integrationchangehistory"
	memberintegrationconsumesetting "zdmin/api/internal/handler/member/integrationconsumesetting"
	memberlevel "zdmin/api/internal/handler/member/level"
	memberloginlog "zdmin/api/internal/handler/member/loginlog"
	membermember "zdmin/api/internal/handler/member/member"
	memberrulesetting "zdmin/api/internal/handler/member/rulesetting"
	memberstatistics "zdmin/api/internal/handler/member/statistics"
	membertag "zdmin/api/internal/handler/member/tag"
	membertask "zdmin/api/internal/handler/member/task"
	sysauth "zdmin/api/internal/handler/sys/auth"
	sysconfig "zdmin/api/internal/handler/sys/config"
	sysdept "zdmin/api/internal/handler/sys/dept"
	sysdict "zdmin/api/internal/handler/sys/dict"
	syslog "zdmin/api/internal/handler/sys/log"
	sysmenu "zdmin/api/internal/handler/sys/menu"
	sysrole "zdmin/api/internal/handler/sys/role"
	sysuser "zdmin/api/internal/handler/sys/user"
	"zdmin/api/internal/svc"

	"github.com/tal-tech/go-zero/rest"
)

func RegisterHandlers(engine *rest.Server, serverCtx *svc.ServiceContext) {
	engine.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/api/sys/auth",
				Handler: sysauth.AuthHandler(serverCtx),
			},
		},
	)

	engine.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/api/sys/config/add",
				Handler: sysconfig.ConfigAddHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/api/sys/config/list",
				Handler: sysconfig.ConfigListHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/sys/config/update",
				Handler: sysconfig.ConfigUpdateHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/sys/config/delete",
				Handler: sysconfig.ConfigDeleteHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
	)

	engine.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/api/sys/dept/add",
				Handler: sysdept.DeptAddHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/api/sys/dept/list",
				Handler: sysdept.DeptListHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/sys/dept/update",
				Handler: sysdept.DeptUpdateHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/sys/dept/delete",
				Handler: sysdept.DeptDeleteHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
	)

	engine.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/api/sys/dict/add",
				Handler: sysdict.DictAddHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/api/sys/dict/list",
				Handler: sysdict.DictListHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/sys/dict/update",
				Handler: sysdict.DictUpdateHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/sys/dict/delete",
				Handler: sysdict.DictDeleteHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
	)

	engine.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/api/sys/loginLog/list",
				Handler: syslog.LoginLogListHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/sys/loginLog/delete",
				Handler: syslog.LoginLogDeleteHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
	)

	engine.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/api/sys/menu/add",
				Handler: sysmenu.MenuAddHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/api/sys/menu/list",
				Handler: sysmenu.MenuListHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/sys/menu/update",
				Handler: sysmenu.MenuUpdateHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/sys/menu/delete",
				Handler: sysmenu.MenuDeleteHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
	)

	engine.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/api/sys/role/add",
				Handler: sysrole.RoleAddHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/api/sys/role/list",
				Handler: sysrole.RoleListHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/sys/role/update",
				Handler: sysrole.RoleUpdateHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/sys/role/delete",
				Handler: sysrole.RoleDeleteHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/sys/role/menuIds",
				Handler: sysrole.RoleMenuIdsHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/sys/role/menuUpdate",
				Handler: sysrole.RoleMenuUpdateHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
	)

	engine.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/api/sys/sysLog/list",
				Handler: syslog.SysLogListHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/sys/sysLog/delete",
				Handler: syslog.SysLogDeleteHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
	)

	engine.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/api/sys/user/login",
				Handler: sysuser.UserLoginHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/api/sys/user/:id",
				Handler: sysuser.UserInfoHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/sys/user/add",
				Handler: sysuser.UserAddHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/api/sys/user/list",
				Handler: sysuser.UserListHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/sys/user/update",
				Handler: sysuser.UserUpdateHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/sys/user/delete",
				Handler: sysuser.UserDeleteHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/sys/user/reSetPassword",
				Handler: sysuser.ReSetPasswordHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/sys/user/roleUpdate",
				Handler: sysuser.UserRoleUpdateHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/sys/user/statusUpdate",
				Handler: sysuser.UserStatusUpdateHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
	)

	engine.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/api/member/member/add",
				Handler: membermember.MemberAddHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/api/member/member/list",
				Handler: membermember.MemberListHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/member/member/update",
				Handler: membermember.MemberUpdateHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/member/member/delete",
				Handler: membermember.MemberDeleteHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
	)

	engine.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/api/member/address/add",
				Handler: memberaddress.MemberAddressAddHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/api/member/address/list",
				Handler: memberaddress.MemberAddressListHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/member/address/update",
				Handler: memberaddress.MemberAddressUpdateHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/member/address/delete",
				Handler: memberaddress.MemberAddressDeleteHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
	)

	engine.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/api/member/growthchangehistory/add",
				Handler: membergrowthchangehistory.GrowthChangeHistoryAddHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/api/member/growthchangehistory/list",
				Handler: membergrowthchangehistory.GrowthChangeHistoryListHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/member/growthchangehistory/update",
				Handler: membergrowthchangehistory.GrowthChangeHistoryUpdateHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/member/growthchangehistory/delete",
				Handler: membergrowthchangehistory.GrowthChangeHistoryDeleteHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
	)

	engine.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/api/member/integrationchangehistory/add",
				Handler: memberintegrationchangehistory.IntegrationChangeHistoryAddHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/api/member/integrationchangehistory/list",
				Handler: memberintegrationchangehistory.IntegrationChangeHistoryListHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/member/integrationchangehistory/update",
				Handler: memberintegrationchangehistory.IntegrationChangeHistoryUpdateHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/member/integrationchangehistory/delete",
				Handler: memberintegrationchangehistory.IntegrationChangeHistoryDeleteHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
	)

	engine.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/api/member/integrationconsumesetting/add",
				Handler: memberintegrationconsumesetting.IntegrationConsumeSettingAddHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/api/member/integrationconsumesetting/list",
				Handler: memberintegrationconsumesetting.IntegrationConsumeSettingListHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/member/integrationconsumesetting/update",
				Handler: memberintegrationconsumesetting.IntegrationConsumeSettingUpdateHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/member/integrationconsumesetting/delete",
				Handler: memberintegrationconsumesetting.IntegrationConsumeSettingDeleteHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
	)

	engine.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/api/member/level/add",
				Handler: memberlevel.MemberLevelAddHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/api/member/level/list",
				Handler: memberlevel.MemberLevelListHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/member/level/update",
				Handler: memberlevel.MemberLevelUpdateHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/member/level/delete",
				Handler: memberlevel.MemberLevelDeleteHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
	)

	engine.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/api/member/loginlog/add",
				Handler: memberloginlog.MemberLoginLogAddHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/api/member/loginlog/list",
				Handler: memberloginlog.MemberLoginLogListHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/member/loginlog/update",
				Handler: memberloginlog.MemberLoginLogUpdateHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/member/loginlog/delete",
				Handler: memberloginlog.MemberLoginLogDeleteHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
	)

	engine.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/api/member/rulesetting/add",
				Handler: memberrulesetting.MemberRuleSettingAddHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/api/member/rulesetting/list",
				Handler: memberrulesetting.MemberRuleSettingListHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/member/rulesetting/update",
				Handler: memberrulesetting.MemberRuleSettingUpdateHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/member/rulesetting/delete",
				Handler: memberrulesetting.MemberRuleSettingDeleteHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
	)

	engine.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/api/member/statistics/add",
				Handler: memberstatistics.MemberStatisticsInfoAddHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/api/member/statistics/list",
				Handler: memberstatistics.MemberStatisticsInfoListHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/member/statistics/update",
				Handler: memberstatistics.MemberStatisticsInfoUpdateHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/member/statistics/delete",
				Handler: memberstatistics.MemberStatisticsInfoDeleteHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
	)

	engine.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/api/member/tag/add",
				Handler: membertag.MemberTagAddHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/api/member/tag/list",
				Handler: membertag.MemberTagListHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/member/tag/update",
				Handler: membertag.MemberTagUpdateHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/member/tag/delete",
				Handler: membertag.MemberTagDeleteHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
	)

	engine.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/api/member/task/add",
				Handler: membertask.MemberTaskAddHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/api/member/task/list",
				Handler: membertask.MemberTaskListHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/member/task/update",
				Handler: membertask.MemberTaskUpdateHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/member/task/delete",
				Handler: membertask.MemberTaskDeleteHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
	)
}
